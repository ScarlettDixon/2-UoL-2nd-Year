;;Domain template 1 for cleaning floor regions
;; A domain file for CMP2020M assignment 2017/2018

;; Domain definition;;
(define (domain Assignment1)

    ;; We require some typing to make the code easier to read but it is not necessary.
    (:requirements :typing)

    ;; We have two types: cleaners and the regions, both are objects
    (:types cleaner region - object)

    ;; define all the predicates that can be used in the problem files
    (:predicates  

    ;; described what region a cleaner is at
    (cleaner-at ?c - cleaner ?x - region)

    ;; indicates that region ?x is above region ?y
    (above ?x - region ?y - region)

    ;; indicates that region ?x is below region ?y
    (below ?x - region ?y - region)

    ;; indicates that region ?x is right of region ?y
    (right ?x - region ?y - region)

    ;; indicates that region ?x is left of region ?y
    (left ?x - region ?y - region)
    
    ;; indicates that a region is cleaned
    (cleaned ?x - region)

;; indicates that a region is dirty
    (dirty ?x - region)

    )


 (:action suck ;;The cleaner will clean this region;;
  :parameters (?r - cleaner ?x - region ?)
  :precondition (and (dirty ?x) (cleaner-at ?r ?x)) ;;Location must be dirty and where the cleaner is located
  :effect (and (cleaned ?x) (not(dirty ?x))) ;;The location will be cleaned and so will no longer be dirty
 )
 (:action move_up ;;Cleaner will move up;;
  :parameters (?r - cleaner ?x ?x2 - region)
  :precondition (and 
                (below ?x ?x2) (cleaner-at ?r ?x))
  :effect (and (cleaner-at ?r ?x2) (not(cleaner-at ?r ?x)))
 )
  (:action move_down;;Cleaner will move down;;
  :parameters (?r - cleaner ?x ?x2 - region)
  :precondition (and 
                  (above ?x ?x2) (cleaner-at ?r ?x))
  :effect (and (cleaner-at ?r ?x2) (not(cleaner-at ?r ?x)))
 )
  (:action move_left;;Cleaner will move left;;
  :parameters (?r - cleaner ?x ?x2 - region)
  :precondition (and 
                 (right ?x ?x2) (cleaner-at ?r ?x))
  :effect (and (cleaner-at ?r ?x2) (not(cleaner-at ?r ?x)))
 )
  (:action move_right;;Cleaner will move right;;
  :parameters (?r - cleaner ?x ?x2 - region)
  :precondition (and 
                 (left ?x ?x2) (cleaner-at ?r ?x))
  :effect (and (cleaner-at ?r ?x2) (not(cleaner-at ?r ?x)))
 )
)


;;Problem definition
(define (problem cleaning-problem1)
 (:domain Assignment1)
 (:objects  region_0-1 region_0-2  
           region_1-1 region_1-2  - region
           cleaner1 - cleaner
)
 (:init 
   (region region_0-1)
   (region region_0-2)
   (region region_1-1)
   (region region_1-2)
   (cleaner cleaner1)
   (cleaner-at cleaner1 region_0-1)
   (above region_0-1 region_1-1)
   (above region_0-2 region_1-2)
   (below region_1-1 region_0-1)
   (below region_1-2 region_0-2)
   (right region_0-2 region_0-1)
   (right region_1-2 region_1-1)
   (left region_0-1 region_0-2)
   (left region_1-1 region_1-2)
   (dirty region_0-1)
   (dirty region_0-2)
   (dirty region_1-1)
   (dirty region_1-2)

)
 (:goal (and
    (cleaned region_0-1)
    (cleaned region_0-2)
    (cleaned region_1-1)
    (cleaned region_1-2)
))
)
